package com.exmart.qiyishow.tools;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Currency;
import java.util.Date;
import java.util.List;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.ByteArrayBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.util.EntityUtils;

import android.app.Activity;
import android.app.ActivityManager;
import android.app.ActivityManager.RunningTaskInfo;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Environment;
import android.provider.MediaStore;
import android.util.Log;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Toast;

/**
 * 工具类
 * @author ZhaoYe
 *
 */
public class Tools {
	/**
	 * 去标题
	 */
	public static void setWindow(Activity activity) {
		activity.requestWindowFeature(Window.FEATURE_NO_TITLE);
	}
	
    /**
     * 将值保存到对应的SharedPreference中去
     * 
     * @param context 上下文对象
     * @param spname 文件名
     * @param key 字段名
     * @param value 值
     */
    public static void setValueInSharedPreference(Context context, String spname, String key, String value) {
        SharedPreferences prefx = context.getSharedPreferences(spname, Context.MODE_PRIVATE);
        Editor editor = prefx.edit();
        editor.putString(key, value);
        editor.commit();
    }
    
    /**
     * 获取SharedPreference 中对应的字段 
     *  
     * @param context 上下文对象
     * @param spname 文件名
     * @param key 字段名
     */
    public static String getValueInSharedPreference(Context context, String spname, String key) {
        String result = "";
        SharedPreferences prefx = context.getSharedPreferences(spname, Context.MODE_PRIVATE);
        if (prefx != null) {
            result = prefx.getString(key, "");
        }
        return result;
    }
    /**
     * 获取系统版本号
     * @return 系统版本号
     */
    public static String getOSVersion(){
		return android.os.Build.VERSION.SDK_INT+"";
    }
    
    /**
     * 获取软件信息
     * context 上下文
     * Tag 0：返回versionName 1：返回versionCode
     * @return 软件信息
     */
    public static String getAppVersion(Context context,int Tag) {  
        String version = "";  
        try {  
            PackageManager pm = context.getPackageManager();  
            PackageInfo pi = pm.getPackageInfo(context.getPackageName(), 0);  
            if(Tag == 0){
            	version = pi.versionName;  
            }else{
            	version = pi.versionCode+"";
            }
        } catch (Exception e) {  
            Log.e("VersionInfo", "Exception", e);  
        }  
        return version;  
    }
    /**
     * 获取屏幕宽度
     * @return 
     */
    public static int getWidth(Context context){
    	WindowManager wm = (WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
        int width = wm.getDefaultDisplay().getWidth();
		return width;
    }
    /**
     * 获取屏幕高度
     * @return
     */
    public static int getHeight(Context context){
    	WindowManager wm = (WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
    	int height = wm.getDefaultDisplay().getHeight();
		return height;
    }
    public static int CheckMediaFileSize(File mediaFile){
    	
    	long fileSizeInBytes = mediaFile.length();
    	long fileSizeInKb = fileSizeInBytes / 1024;
    	int fileSizeInMb = (int)fileSizeInKb / 1024;
    	return fileSizeInMb;
    }
    public static String getMbCache(Long cacheSize){
    	long fileSizeInKb = cacheSize / 1024;
    	DecimalFormat df = new DecimalFormat("#0.00");
    	return df.format(fileSizeInKb / 1024d) + "Mb";
    }
    public static int dip2px(Context context, float dpValue){
    	final float scale = context.getResources().getDisplayMetrics().density;
    	return (int)(dpValue * scale + 0.5f);
    }
    public static int px2dip(Context context, float pxValue){
    	final float scale = context.getResources().getDisplayMetrics().density;
    	return (int) (pxValue / scale + 0.5f);
    }
    public static byte[] bitmap2Byte(Bitmap bitmap){
    	ByteArrayOutputStream baos = new ByteArrayOutputStream();
    	bitmap.compress(Bitmap.CompressFormat.PNG, 100, baos);
    	return baos.toByteArray();
    }
    public static byte[] getBytesFromFile(String path){
    	File file = new File(path);
    	if(!file.exists()){
    		return null;
    	}
    	try {
			FileInputStream stream = new FileInputStream(file);
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			byte[] buffer = new byte[1024];
			int len;
			while((len = stream.read(buffer)) != -1){
				baos.write(buffer, 0, len);
			}
			stream.close();
			baos.close();
			return baos.toByteArray();
		} catch (Exception e) {
			e.printStackTrace();
		}
    	return null;
    }
    
    /**
	 * 上传图片
	 * @param pic 图片数组
	 * @param URL 上传地址
	 * @param width 图片宽
	 * @param height 图片高
	 * @return
	 */
	public static String UploadFile(byte[] pic, String URL, String UserID) {
		ByteArrayEntity arrayEntity;
		String request = "";
		try {
			arrayEntity = new ByteArrayEntity(pic);
			arrayEntity.setContentType("application/octet-stream");

			HttpPost post = new HttpPost(URL);

			MultipartEntity entity = new MultipartEntity();
			ByteArrayBody body = new ByteArrayBody(pic, "a.png");
			StringBody Userid_body = new StringBody(UserID);
			entity.addPart("UserId", Userid_body);
			entity.addPart("Image", body);
			post.setEntity(entity);
			HttpParams params = new BasicHttpParams();
			HttpConnectionParams.setConnectionTimeout(params, 40 * 1000);
			HttpConnectionParams.setSoTimeout(params, 40 * 1000);
			HttpClient client = new DefaultHttpClient(params);
			HttpResponse httpResponse = client.execute(post);
			request = EntityUtils.toString(httpResponse.getEntity());

		} catch (Exception e) {
			e.printStackTrace();
		}
		return request;
	}
	 /**
	    * bitmap转换 bytes
	    *
	    */
	    public static byte[] BitmaptoBytes(Bitmap bm){
	      ByteArrayOutputStream baos = new ByteArrayOutputStream();
	      bm.compress(Bitmap.CompressFormat.PNG,100,baos);
	      return baos.toByteArray(); 
	    }
	    
	    /**
	     * 跳转到图片裁剪
	     * 
	     * @param uri
	     */
	    public static void goZoomImage(Activity activity,Uri uri, int width, int height,boolean flag) {
	        try {
	            Intent intent = new Intent("com.android.camera.action.CROP");
	            intent.setDataAndType(uri, "image/*");
	           	intent.putExtra("crop", flag); //设置了参数，就会调用裁剪，如果不设置，就会跳过裁剪的过程。
	           	// 设置裁剪图片的额宽高
	           	intent.putExtra("outputX", width);
	           	intent.putExtra("outputY", height);
	            // aspectX aspectY 是宽高的比例
	            intent.putExtra("aspectX", width);
	            intent.putExtra("aspectY", height);
	            intent.putExtra("return-data", true);
	            activity.startActivityForResult(intent, 2000);
	        } catch (Exception e) {
	            Toast.makeText(activity, "请先安装图库", Toast.LENGTH_SHORT).show();
	        }
	    }
	    
	    /**
	     * 跳转到图库
	     */
	    public static void goImageChoice(Activity activity) {
	        try {
	            Intent intent = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
	            intent.setType("image/*"); // 设置文件类型
	            activity.startActivityForResult(intent, 10);// 转到图片
	        } catch (Exception e) {
	            Toast.makeText(activity, "请先安装图库", Toast.LENGTH_SHORT).show();
	        }
	    }
	    
	    /**
		 * 跳转到照相机
		 */
		public static Uri goCamera(Activity activity) {
			Intent captrueIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE, null);
			  File picFile = getUri();
			  if (picFile == null) {
			      return null;
			  }
			  captrueIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(picFile));
			  activity.startActivityForResult(captrueIntent, 20);
			  return Uri.fromFile(picFile);
		}

		/**
		 * 获取照相机uri
		 * @return
		 */
		private static File getUri() {
	        File dcimFile = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM);
	        if (!dcimFile.exists()) {
	            return null;
	        }
	        File file = new File(dcimFile.getAbsolutePath() + "/dcim" + System.currentTimeMillis() + ".jpg");
	        if (!file.exists()) {
	            try {
	                file.createNewFile();
	            } catch (IOException e) {
	                e.printStackTrace();
	            }
	        }
	        return file;
	    }
		/**
		 * 判断应用程序是否启动
		 */
		public static boolean isTopActivity(Context context){
			String packageName = "com.exmart.qiyishow";
			ActivityManager activityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE); 
			List<RunningTaskInfo> tasksInfo = activityManager.getRunningTasks(1); 
			if(tasksInfo.size() > 0){ 
			//应用程序位于堆栈的顶层 
			if(packageName.equals(tasksInfo.get(0).topActivity.getPackageName())){ 
			return true; 
			} 
			} 
			return false;
			}
		
		public static String stringDate2jiange(String strTime) {
			System.out.println(strTime);
			Date date = null;
			Date currentDate = new Date();
			
			try {
				date = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").parse(strTime);
			} catch (ParseException e) {
				e.printStackTrace();
				return "";
			}
			long hours = currentDate.getTime() - date.getTime();
			System.out.println(hours);
			int minusHours = (int) (hours / (60 * 60 * 1000));
			System.out.println(minusHours);
			if (minusHours == 0) {
				int fenzhong = (int) (hours / (60 * 1000));
				if ( fenzhong < 5){
					return "刚刚";
				} else if (fenzhong > 5 && fenzhong < 30) {
					return fenzhong + "分钟前";
				} else if (fenzhong > 30 &&  fenzhong < 60) {
					return "半小时前";
				}
			} else if (minusHours > 1 && minusHours < 24) {
				return minusHours + "小时前";
			} else if (minusHours > 24) {
				int days = minusHours / 24;
				return days + "天前";
			}
			return "";
		}
}
