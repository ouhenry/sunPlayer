package com.exmart.qiyishow.loader.cache.disc.impl;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import android.graphics.Bitmap;

import com.exmart.qiyishow.loader.cache.disc.DiskCache;
import com.exmart.qiyishow.loader.cache.disc.naming.FileNameGenerator;
import com.exmart.qiyishow.loader.core.DefaultConfigurationFactory;
import com.exmart.qiyishow.loader.utils.IoUtils;
import com.exmart.qiyishow.loader.utils.IoUtils.CopyListener;

/**
 * 本地缓存基类
 * 
 * @author henry
 * @see FileNameGenerator
 */
public abstract class BaseDiskCache implements DiskCache {
	/** {@value} */
	public static final int DEFAULT_BUFFER_SIZE = 32 * 1024; // 32 KB
	/** {@value} */
	public static final Bitmap.CompressFormat DEFAULT_COMPRESS_FORMAT = Bitmap.CompressFormat.PNG;
	/** {@value} */
	public static final int DEFAULT_COMPRESS_QUALITY = 100;
	
	private static final String ERROR_ARG_NULL = " argument must be not null";
	private static final String TEMP_IMAGE_POSTFIX = ".tmp";
	
	protected final File cacheDir;
	protected final File reserveCacheDir;
	
	protected final FileNameGenerator fileNameGenerator;
	
	protected int bufferSize = DEFAULT_BUFFER_SIZE;
	
	protected Bitmap.CompressFormat compressFormat = DEFAULT_COMPRESS_FORMAT;
	protected int compressQuality = DEFAULT_COMPRESS_QUALITY;
	
	/** @param cacheDir 文件缓存目录*/
	public BaseDiskCache(File cacheDir) {
		this(cacheDir, null);
	}
	/**
	 * @param cacheDir			文件缓存目录
	 * @param reserveCacheDir	可以为null; 文件缓存储备目录. 在主目录不可用是使用
	 */
	public BaseDiskCache(File cacheDir, File reserveCacheDir) {
		this(cacheDir, reserveCacheDir, DefaultConfigurationFactory.createFileNameGenerator());
	}
	/**
	 * @param cacheDir			文件缓存目录
	 * @param reserveCacheDir	可以为null; 文件缓存储备目录. 在主目录不可用时使用
	 * @param fileNameGenerator	{@linkplain com.exmart.qiyishow.loader.cache.disc.naming.FileNameGenerator 
	 * 							Name generator} for 缓存的文件
	 */
	public BaseDiskCache(File cacheDir, File reserveCacheDir, FileNameGenerator fileNameGenerator) {
		if (cacheDir == null) {
			throw new IllegalArgumentException("cacheDir" + ERROR_ARG_NULL);
		}
		if (fileNameGenerator == null) {
			throw new IllegalArgumentException("fileNameGenerator" + ERROR_ARG_NULL);
		}
		
		this.cacheDir = cacheDir;
		this.reserveCacheDir = reserveCacheDir;
		this.fileNameGenerator = fileNameGenerator;
	}
	
	@Override
	public File getDirectory() {
		return cacheDir;
	}
	
	@Override
	public File get(String imageUri) {
		return getFile(imageUri);
	}
	
	@Override
	public boolean save(String imageUri, InputStream imageStream,
			CopyListener listener) throws IOException {
		File imageFile = getFile(imageUri);
		System.out.println(imageFile.getAbsolutePath());
		File tmpFile = new File(imageFile.getAbsoluteFile() + TEMP_IMAGE_POSTFIX);
		boolean loaded = false;
		try {
			OutputStream os = new BufferedOutputStream(new FileOutputStream(tmpFile), bufferSize);
			try {
				loaded = IoUtils.copyStream(imageStream, os, listener, bufferSize);
				
			} finally {
				IoUtils.closeSilently(os);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (loaded && !tmpFile.renameTo(imageFile)) {
				loaded = false;
			}
			if (!loaded) {
				tmpFile.delete();
			}
		}
		return loaded;
	}
	
	@Override
	public boolean save(String imageUri, Bitmap bitmap) throws IOException {
		File imageFile = get(imageUri);
		File tmpFile = new File(imageFile.getAbsoluteFile() + TEMP_IMAGE_POSTFIX);
		OutputStream os = new BufferedOutputStream(new FileOutputStream(tmpFile), bufferSize);
		boolean savedSuccessfully = false;
		try {
			savedSuccessfully = bitmap.compress(compressFormat, compressQuality, os);
		} finally {
			IoUtils.closeSilently(os);
			if (savedSuccessfully && !tmpFile.renameTo(imageFile)) {
				savedSuccessfully = false;
			}
			if(!savedSuccessfully) {
				tmpFile.delete();
			}
		}
		bitmap.recycle();
		return savedSuccessfully;
	}
	
	@Override
	public boolean remove(String imageUri) {
		return getFile(imageUri).delete();
	}
	@Override
	public void close() {
		
	}
	@Override
	public void clear() {
		File[] files = cacheDir.listFiles();
		if (files != null) {
			for (File f : files) {
				f.delete();
			}
		}
	}
	
	/**
	 * 
	 * @param imageUri
	 * @return file 对象(not null). 文件对象可以引用不存在的文件
	 */
	protected File getFile(String imageUri) {
		String fileName = fileNameGenerator.generate(imageUri);
		File dir = cacheDir;
		if (!cacheDir.exists() && !cacheDir.mkdir()) {
				if (reserveCacheDir != null && (reserveCacheDir.exists() || reserveCacheDir.mkdir())) {
					dir = reserveCacheDir;
				}
			}
			return new File(dir, fileName);
	}
	public void setBufferSize(int bufferSize) {
		this.bufferSize = bufferSize;
	}
	public void setCompressFormat(Bitmap.CompressFormat compressFormat) {
		this.compressFormat = compressFormat;
	}
	public void setCompressQuality(int compressQuality) {
		this.compressQuality = compressQuality;
	}
	
}
