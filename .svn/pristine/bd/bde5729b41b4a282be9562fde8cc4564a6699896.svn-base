package com.exmart.qiyishow.ui.home;

import java.util.ArrayList;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.ByteArrayBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.protocol.BasicHttpContext;
import org.apache.http.protocol.HttpContext;
import org.apache.http.util.EntityUtils;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.graphics.Bitmap;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.text.TextUtils;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.exmart.qiyishow.R;
import com.exmart.qiyishow.bean.TemplateVideo;
import com.exmart.qiyishow.loader.core.DisplayImageOptions;
import com.exmart.qiyishow.loader.core.VideoLoader;
import com.exmart.qiyishow.loader.core.assist.FailReason;
import com.exmart.qiyishow.loader.core.display.SimpleBitmapDisplayer;
import com.exmart.qiyishow.loader.core.listener.VideoLoadingListener;
import com.exmart.qiyishow.loader.core.listener.VideoLoadingProgressListener;
import com.exmart.qiyishow.tools.Constant;
import com.exmart.qiyishow.tools.CustomMultipartEntity;
import com.exmart.qiyishow.tools.Tools;
import com.exmart.qiyishow.tools.CustomMultipartEntity.ProgressListener;
import com.exmart.qiyishow.ui.view.ProgressWheel;
import com.exmart.qiyishow.ui.view.TextureVideoView;
import com.exmart.qiyishow.ui.view.TextureVideoView;

/**
 * 
 * 模版详情
 * 
 */
public class TemplateDetailActivity extends Activity implements
		OnClickListener, VideoLoadingListener, VideoLoadingProgressListener {
	private TextView tv_title;

	private ImageView ivAddPicture;
	public static Handler mhandler;
	private static final int CROP_PIC = 3;
	private Bitmap mBitmap;
	private ProgressDialog pd;
	private TemplateVideo mTemplateVideo;
	private final static int FIRE_RATE = 1;

	private ProgressWheel mTvPercentage;

	private TextureVideoView mTvv;
	private ImageView mIvPause;

	private ProgressListener mProgressListener;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.template_detail_layout);
		tv_title = (TextView) findViewById(R.id.tv_title);
		tv_title.setText("模板详情");
		ivAddPicture = (ImageView) findViewById(R.id.iv_pic_face);
		ivAddPicture.setOnClickListener(this);
		findViewById(R.id.bt_add_letter).setOnClickListener(this);
		findViewById(R.id.bt_compose).setOnClickListener(this);
		TextView tvBack = (TextView) findViewById(R.id.bt_back);
		tvBack.setBackgroundResource(R.drawable.back_bg);
		tvBack.setVisibility(View.VISIBLE);
		tvBack.setOnClickListener(this);
		mTvPercentage = (ProgressWheel) findViewById(R.id.pw_percentage);
		mIvPause = (ImageView) findViewById(R.id.iv_pause);
		initData();
		mhandler = new Handler() {
			public void handleMessage(android.os.Message msg) {
				switch (msg.what) {
				case CROP_PIC:
					mBitmap = (Bitmap) msg.obj;
					ImageView iv = (ImageView) findViewById(R.id.iv_pic_face);
					iv.setImageBitmap(mBitmap);
					break;
				case FIRE_RATE:
					mTvPercentage.setVisibility(View.GONE);
					break;

				default:
					break;
				}
			};
		};
	}

	private void initData() {
		mTemplateVideo = getIntent().getParcelableExtra("templateVideo");
		((TextView) findViewById(R.id.tv_template_title))
				.setText(mTemplateVideo.getTname());
		((TextView) findViewById(R.id.tv_template_user)).setText(mTemplateVideo
				.getDesc());
		mTvv = (TextureVideoView) findViewById(R.id.tvv_template_video);
		DisplayImageOptions options = new DisplayImageOptions.Builder()
				.cacheInMemory(false).cacheOnDisk(true)
				.displayer(new SimpleBitmapDisplayer())
				.considerExifParams(true).build();
		VideoLoader.getInstance().displayVideo(mTemplateVideo.getUrl(),
				options, TemplateDetailActivity.this,
				TemplateDetailActivity.this);
		mTvv.setOnClickListener(this);

	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.iv_pic_face:
			Intent intentFace = new Intent(this, SelectFaceActivity.class);
			startActivity(intentFace);
			break;
		case R.id.bt_add_letter:
			Intent intent = new Intent(this, AddCaptionsActivity.class);
			startActivity(intent);
			break;
		case R.id.tvv_template_video:
			if (mTvv.isPlaying()) {
				mTvv.pause();
				mIvPause.setVisibility(View.VISIBLE);
			} else {
				mIvPause.setVisibility(View.GONE);
				mTvv.play();
			}
			break;
		case R.id.bt_compose:
			
			if (mBitmap == null) {
				Toast.makeText(this, "头像不能为空", Toast.LENGTH_SHORT).show();
				return;
			}
			String userId = Tools.getValueInSharedPreference(this, Constant.SPNAME, Constant.USERID);
			if (TextUtils.isEmpty(userId)) {
				Toast.makeText(this, "用户未登录", Toast.LENGTH_SHORT).show();
				return;
			}
			new AsyncTask<String, Integer, String>() {
				@Override
				protected void onPreExecute() {
					pd = new ProgressDialog(TemplateDetailActivity.this);
					pd.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
					setProgressBarVisibility(true);
					pd.setMessage("正在上传...");
					pd.setCancelable(false);
					pd.setMax(100);
					pd.show();
				}

				@Override
				protected String doInBackground(String... params) {
					byte[] data = null;
					if (mBitmap != null) {
						data = Tools.bitmap2Byte(mBitmap);
					}
					final long totalSize = data
							.length;
					String response = "";
					try {

						// arrayEntity = new ByteArrayEntity(pic);
						// arrayEntity.setContentType("application/octet-stream");
						HttpContext httpContext = new BasicHttpContext();
						HttpPost post = new HttpPost(Constant.VIDEO_IMAGE_UPLOAD);
						mProgressListener = new ProgressListener() {

							@Override
							public void transferred(long num) {
								publishProgress((int) ((num / (float) totalSize) * 100));
							}
						};
						CustomMultipartEntity multipartEntiry = new CustomMultipartEntity(
								mProgressListener);

						ByteArrayBody body = new ByteArrayBody(data, "a.png");
						StringBody video_id = new StringBody(params[1]);
						StringBody user_id = new StringBody(params[0]);
						StringBody subTitle_1 = new StringBody("fda");
						StringBody subTitle_2 = new StringBody("");
						StringBody subTitle_3 = new StringBody("");
						StringBody subTitle_4 = new StringBody("");
						StringBody subTitle_5 = new StringBody("");
						multipartEntiry.addPart("VideoId", video_id);
						multipartEntiry.addPart("UserId", user_id);
						multipartEntiry.addPart("Subtitles1", subTitle_1);
						multipartEntiry.addPart("Subtitles2", subTitle_2);
						multipartEntiry.addPart("Subtitles3", subTitle_3);
						multipartEntiry.addPart("Subtitles4", subTitle_4);
						multipartEntiry.addPart("Subtitles5", subTitle_5);
						multipartEntiry.addPart("Image", body);
						post.setEntity(multipartEntiry);
						HttpParams httpParams = new BasicHttpParams();
						HttpConnectionParams.setConnectionTimeout(httpParams,
								40 * 1000);
						HttpConnectionParams
								.setSoTimeout(httpParams, 40 * 1000);
						
						HttpClient client = new DefaultHttpClient(httpParams);
						HttpResponse httpResponse = client.execute(post,
								httpContext);
						response = EntityUtils.toString(httpResponse
								.getEntity());
					} catch (Exception e) {
						e.printStackTrace();
					}

					return response;
				}

				@Override
				protected void onPostExecute(String result) {
					pd.dismiss();
					finish();
				}

				@Override
				protected void onProgressUpdate(Integer... values) {
					pd.setProgress(values[0]);
				}

				@Override
				protected void onCancelled() {

				};
			}.execute(userId, mTemplateVideo.getId());
			break;
		case R.id.bt_back:
			finish();
			break;

		default:
			break;
		}
	}

	@Override
	protected void onResume() {
		// if (mTvv.isPlaying()) {
		// mTvv.pause();
		mIvPause.setVisibility(View.GONE);
		// }
		super.onResume();
	}

	@Override
	protected void onPause() {
		if (mTvv.isPlaying()) {
			mTvv.pause();
		}
		super.onPause();
	}

	@Override
	protected void onDestroy() {
		mTvv.relaseMediaPlayer();
		super.onDestroy();
	}

	@Override
	protected void onNewIntent(Intent intent) {
		ArrayList<String> captions = intent.getStringArrayListExtra("captions");

		super.onNewIntent(intent);
	}

	@Override
	public void onProgressUpdate(String videoUri, int current, int total) {
		mTvPercentage.spin();
		mTvPercentage.setText(Math.round(100.0f * current / total) + "%");
	}

	@Override
	public void onLoaingStarted(String videoUri) {

	}

	@Override
	public void onLoadingFailed(String videoUri, FailReason failReason) {

	}

	@Override
	public void onLoadingComplete(String vodeoUri) {
		mhandler.sendEmptyMessage(FIRE_RATE);
		mTvv.setDataSource(vodeoUri);
		mTvv.play();
	}

	@Override
	public void onLoadingCancelled(String videoUri) {

	}
}
